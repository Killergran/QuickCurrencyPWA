@page "/"
@page "/currency-exchange"
@inject CurrencyService CurrencyService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3>Currency Exchange Rates</h3>

<div>
    <label for="fromCurrency">From:</label>
    <select id="fromCurrency" @bind="SelectedFromCurrency">
        @foreach (var currency in AvailableFromCurrencies)
        {
            <option value="@currency">@currency</option>
        }
    </select>
</div>

<div>
    <label for="toCurrency">To:</label>
    <select id="toCurrency" @bind="SelectedToCurrency">
        @foreach (var currency in AvailableToCurrencies)
        {
            <option value="@currency">@currency</option>
        }
    </select>
</div>

<input type="number" @bind="InputAmount" @bind:event="oninput" placeholder="Enter amount" />

<ul>
    @foreach (var exchange in DisplayedCurrencyExchanges)
    {
        <li>@exchange.FromCurrency to @exchange.ToCurrency: @decimal.Parse(exchange.ExchangeRate.ToString("F2"))</li>
    }
</ul>

@code {
    private decimal inputAmount;
    private decimal convertedAmount;
    private List<string> AvailableFromCurrencies { get; set; } = new List<string>();
    private List<string> AvailableToCurrencies { get; set; } = new List<string>();
    private List<CurrencyExchangeClass> AllCurrencyExchanges { get; set; } = new List<CurrencyExchangeClass>();
    private List<CurrencyExchangeClass> RequestedCurrencyExchanges { get; set; } = new List<CurrencyExchangeClass>();
    private List<CurrencyConversion> SelectedConversions { get; set; } = new List<CurrencyConversion>();
    private List<CurrencyExchangeClass> DisplayedCurrencyExchanges { get; set; } = new List<CurrencyExchangeClass>();

    private string selectedFromCurrency = "SEK";
    private string selectedToCurrency = "USD";

    public decimal InputAmount
    {
        get => inputAmount;
        set
        {
            if (inputAmount != value)
            {
                inputAmount = value;
                ConvertAmount();
            }
        }
    }

    public decimal ConvertedAmount
    {
        get => convertedAmount;
        set
        {
            if (convertedAmount != value)
            {
                convertedAmount = value;
            }
        }
    }

    public string SelectedFromCurrency
    {
        get => selectedFromCurrency;
        set
        {
            if (selectedFromCurrency != value)
            {
                selectedFromCurrency = value;
                UpdateAvailableToCurrencies();

                // Automatically update the ToCurrency if it matches the new FromCurrency
                if (SelectedToCurrency == selectedFromCurrency)
                {
                    SelectedToCurrency = AvailableToCurrencies.FirstOrDefault();
                }

                ConvertAmount();
            }
        }
    }

    public string SelectedToCurrency
    {
        get => selectedToCurrency;
        set
        {
            if (selectedToCurrency != value)
            {
                selectedToCurrency = value;
                ConvertAmount();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        System.Diagnostics.Debug.WriteLine("LoadCurrencyRates");

        var isOnline = NavigationManager.Uri.StartsWith("http");
        System.Diagnostics.Debug.WriteLine(isOnline.ToString());

        // Load selected conversions from local storage
        SelectedConversions = await LocalStorage.GetItemAsync<List<CurrencyConversion>>("SelectedConversions") ?? new List<CurrencyConversion>();

        if (isOnline)
        {
            await LoadCurrencyRates();
        }
        else
        {
            // Load from local storage
            AllCurrencyExchanges = await LocalStorage.GetItemAsync<List<CurrencyExchangeClass>>("AllCurrencyExchanges");
            RequestedCurrencyExchanges = await LocalStorage.GetItemAsync<List<CurrencyExchangeClass>>("RequestedCurrencyExchanges");
            var lastUpdated = await LocalStorage.GetItemAsync<DateTime>("LastUpdated");

            if (AllCurrencyExchanges == null)
            {
                AllCurrencyExchanges = new List<CurrencyExchangeClass>();
            }

            if (RequestedCurrencyExchanges == null)
            {
                RequestedCurrencyExchanges = new List<CurrencyExchangeClass>();
            }

            // Optionally, you can display the last updated time
            Console.WriteLine($"Data last updated on: {lastUpdated}");
        }

        UpdateAvailableFromCurrencies();
        UpdateAvailableToCurrencies();
        FilterDisplayedCurrencyExchanges();
    }

    private async Task LoadCurrencyRates()
    {
        System.Diagnostics.Debug.WriteLine("LoadCurrencyRates");

        var apiKey = await GetApiKey(); // Replace with your actual API key
        var currenciesToLoad = CurrenciesToLoad(SelectedConversions);

        foreach (var currency in currenciesToLoad)
        {
            var response = await CurrencyService.GetCurrencyRatesAsync(apiKey, currency);
            if (response != null && response.Result == "success")
            {
                System.Diagnostics.Debug.WriteLine("Got Success on API call!");
                foreach (var rate in response.Conversion_Rates)
                {
                    AllCurrencyExchanges.Add(new CurrencyExchangeClass
                        {
                            FromCurrency = currency,
                            ToCurrency = rate.Key,
                            ExchangeRate = rate.Value,
                            LastUpdated = DateTime.Parse(response.Time_Last_Update_Utc)
                        });
                }
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Failed to get data from API");
            }
        }

        // Save to local storage
        await LocalStorage.SetItemAsync("AllCurrencyExchanges", AllCurrencyExchanges);
        await LocalStorage.SetItemAsync("LastUpdated", DateTime.UtcNow);

        FilterDisplayedCurrencyExchanges();
    }

    private void ConvertAmount()
    {
        var selectedExchange = AllCurrencyExchanges.FirstOrDefault(e =>
            (e.FromCurrency == SelectedFromCurrency && e.ToCurrency == SelectedToCurrency) ||
            (e.FromCurrency == SelectedToCurrency && e.ToCurrency == SelectedFromCurrency));

        if (selectedExchange != null)
        {
            if (selectedExchange.FromCurrency == SelectedFromCurrency && selectedExchange.ToCurrency == SelectedToCurrency)
            {
                ConvertedAmount = InputAmount * selectedExchange.ExchangeRate;
            }
            else if (selectedExchange.FromCurrency == SelectedToCurrency && selectedExchange.ToCurrency == SelectedFromCurrency)
            {
                ConvertedAmount = InputAmount / selectedExchange.ExchangeRate;
            }
        }
        else
        {
            ConvertedAmount = 0; // Handle case where no exchange rate is found
        }
    }

    private async Task<string> GetApiKey()
    {
        try
        {
            var client = new HttpClient { BaseAddress = new Uri(NavigationManager.BaseUri) };
            var apiKey = await client.GetStringAsync("ApiKey.txt");
            return apiKey.Trim();
        }
        catch (Exception)
        {
            return "Not_API_Key";
        }
    }

    private List<string> CurrenciesToLoad(List<CurrencyConversion> selectedConversions)
    {
        return selectedConversions
            .SelectMany(c => new[] { c.FromCurrency, c.ToCurrency })
            .Distinct()
            .ToList();
    }

    private void UpdateAvailableFromCurrencies()
    {
        AvailableFromCurrencies = SelectedConversions
            .SelectMany(c => new[] { c.FromCurrency, c.ToCurrency })
            .Distinct()
            .ToList();
    }

    private void UpdateAvailableToCurrencies()
    {
        AvailableToCurrencies = SelectedConversions
            .Where(c => c.FromCurrency == SelectedFromCurrency || c.ToCurrency == SelectedFromCurrency)
            .SelectMany(c => new[] { c.FromCurrency, c.ToCurrency })
            .Where(c => c != SelectedFromCurrency)
            .Distinct()
            .ToList();
    }

    private void FilterDisplayedCurrencyExchanges()
    {
        RequestedCurrencyExchanges = AllCurrencyExchanges
            .Where(e => SelectedConversions.Any(c => c.FromCurrency == e.FromCurrency && c.ToCurrency == e.ToCurrency))
            .ToList();

        DisplayedCurrencyExchanges = RequestedCurrencyExchanges;

        // Save requested conversions to local storage
        LocalStorage.SetItemAsync("RequestedCurrencyExchanges", RequestedCurrencyExchanges);
    }

    private class CurrencyConversion
    {
        public string FromCurrency { get; set; }
        public string ToCurrency { get; set; }
    }
}