@page "/"
@page "/currency-exchange"
@inject CurrencyService CurrencyService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3>Currency Exchange Rates</h3>

<div>
    <label for="fromCurrency">From:</label>
    <select id="fromCurrency" @bind="SelectedFromCurrency">
        @foreach (var currency in AvailableFromCurrencies)
        {
            <option value="@currency">@currency</option>
        }
    </select>
</div>

<div>
    <label for="toCurrency">To:</label>
    <select id="Test" @bind="SelectedToCurrency">
        @foreach (var currency in AvailableToCurrencies)
        {
            <option value="@currency">@currency</option>
        }
    </select>
</div>

<input type="number" @bind="InputAmount" @bind:event="oninput" placeholder="Enter amount" />
<p>Converted Amount: @decimal.Parse(ConvertedAmount.ToString("F2"))</p>
<p>Selected Exchange rate: @decimal.Parse(selectedExchangeRate.ToString("F2"))</p>
@* <p>TestDiv: @TestData @TestDataExchanges</p>
 *@

<ul>
    @foreach (var exchange in DisplayedCurrencyExchanges)
    {
        <li>@exchange.FromCurrency to @exchange.ToCurrency: @decimal.Parse(exchange.ExchangeRate.ToString("F2"))</li>
    }
</ul>

@* <p>
    Amount of API calls last fetch: @nrApiCalls
</p>
 *@
@code {
    private int nrApiCalls;
    private decimal inputAmount;
    private decimal convertedAmount;
    private decimal selectedExchangeRate;
    private List<string> AvailableFromCurrencies { get; set; } = new List<string>();
    private List<string> AvailableToCurrencies { get; set; } = new List<string>();
    private CurrencyExchanges AllCurrencyExchanges { get; set; } = new CurrencyExchanges();
    private List<CurrencyExchangeClass> RequestedCurrencyExchanges { get; set; } = new List<CurrencyExchangeClass>();
    private List<CurrencyConversion> SelectedConversions { get; set; } = new List<CurrencyConversion>();
    private List<CurrencyExchangeClass> DisplayedCurrencyExchanges { get; set; } = new List<CurrencyExchangeClass>();
    private DateTime TestData;
    private string selectedFromCurrency = "SEK";
    private string selectedToCurrency = "USD";
    private decimal TestDataExchanges;

    public decimal InputAmount
    {
        get => inputAmount;
        set
        {
            if (inputAmount != value)
            {
                inputAmount = value;
                ConvertAmount();
            }
        }
    }

    public decimal ConvertedAmount
    {
        get => convertedAmount;
        set
        {
            if (convertedAmount != value)
            {
                convertedAmount = value;
            }
        }
    }

    public string SelectedFromCurrency
    {
        get => selectedFromCurrency;
        set
        {
            if (selectedFromCurrency != value)
            {
                var previousCurrency = selectedFromCurrency;
                selectedFromCurrency = value;
                UpdateAvailableToCurrencies();

                // Automatically update the ToCurrency if it matches the new FromCurrency
                if (value == selectedToCurrency)
                {
                    SelectedToCurrency = previousCurrency;
                }
                else
                {
                    // Check if selectedToCurrency exists in AvailableToCurrencies
                    if (!AvailableToCurrencies.Contains(selectedToCurrency))
                    {
                        // Set to default currency if not found
                        SelectedToCurrency = AvailableToCurrencies.FirstOrDefault();
                    }
                }
                ConvertAmount();
            }
        }
    }

    public string SelectedToCurrency
    {
        get => selectedToCurrency;
        set
        {
            if (selectedToCurrency != value)
            {
                selectedToCurrency = value;
                ConvertAmount();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {

        var isOnline = NavigationManager.Uri.StartsWith("http");

        // Load selected conversions from local storage

        await LoadDataFromStorage();

        if (isOnline && AllCurrencyExchanges.IsStale())
        {
            await LoadCurrencyRates();
            nrApiCalls = 1;
        }
        else
        {
            nrApiCalls = 0;
        }

        GetDisplayedCurrencyExchangeRates();
        UpdateAvailableFromCurrencies();
        UpdateAvailableToCurrencies();
        
    }

    private async Task LoadDataFromStorage()
    {
        try
        {
            SelectedConversions = await LocalStorage.GetItemAsync<List<CurrencyConversion>>("SelectedConversions")
                ?? new List<CurrencyConversion>();
            AllCurrencyExchanges = await LocalStorage.GetItemAsync<CurrencyExchanges>("AllCurrencyExchanges")
                ?? new CurrencyExchanges();
            RequestedCurrencyExchanges = await LocalStorage.GetItemAsync<List<CurrencyExchangeClass>>("RequestedCurrencyExchanges")
                ?? new List<CurrencyExchangeClass>();
            var lastUpdated = await LocalStorage.GetItemAsync<DateTime>("LastUpdated");
            TestData = lastUpdated;
            TestDataExchanges = AllCurrencyExchanges.GetExchangeRate("SEK", "USD");
        }
        catch
        {
        }
    }

    private async Task LoadCurrencyRates()
    {
        var apiKey = await GetApiKey(); // Replace with your actual API key

        var response = await CurrencyService.GetCurrencyRatesAsync(apiKey, "SEK");
        if (response != null && response.Result == "success")
        {
            foreach (var rate in response.Conversion_Rates)
            {
                try
                {
                    AllCurrencyExchanges.Update("SEK", rate.Key, rate.Value, DateTime.Parse(response.Time_Last_Update_Utc));
                }
                catch
                {
                    System.Diagnostics.Debug.WriteLine($"Selected Exchange Rate: {rate.Key}");
                }
            }
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("Failed to get data from API");
        }

        // Save to local storage
        await LocalStorage.SetItemAsync("AllCurrencyExchanges", AllCurrencyExchanges);
        await LocalStorage.SetItemAsync("LastUpdated", DateTime.UtcNow);

    }


    private void ConvertAmount()
    {
        selectedExchangeRate = AllCurrencyExchanges.GetExchangeRate(SelectedFromCurrency, SelectedToCurrency);

        ConvertedAmount = InputAmount * selectedExchangeRate;
    }

    private async Task<string> GetApiKey()
    {
        try
        {
            var client = new HttpClient { BaseAddress = new Uri(NavigationManager.BaseUri) };
            var apiKey = await client.GetStringAsync("ApiKey.txt");
            return apiKey.Trim();
        }
        catch (Exception)
        {
            return "Not_API_Key";
        }
    }



    private void UpdateAvailableFromCurrencies()
    {
        AvailableFromCurrencies = SelectedConversions
            .SelectMany(c => new[] { c.FromCurrency, c.ToCurrency })
            .Distinct()
            .ToList();
    }

    private void UpdateAvailableToCurrencies()
    {
        AvailableToCurrencies = SelectedConversions
            .Where(c => c.FromCurrency == SelectedFromCurrency || c.ToCurrency == SelectedFromCurrency)
            .SelectMany(c => new[] { c.FromCurrency, c.ToCurrency })
            .Where(c => c != SelectedFromCurrency)
            .Distinct()
            .ToList();
    }

    private void GetDisplayedCurrencyExchangeRates()
    {
        List<CurrencyExchangeClass> myConvertions = new List<CurrencyExchangeClass>();
        
        foreach (var conversion in SelectedConversions)
        {
            var exchange = AllCurrencyExchanges.GetExchange(conversion.FromCurrency, conversion.ToCurrency);
            if (exchange != null)
            {
                myConvertions.Add(exchange);
            }
        }
        DisplayedCurrencyExchanges = myConvertions;

        // Save requested conversions to local storage
        LocalStorage.SetItemAsync("RequestedCurrencyExchanges", RequestedCurrencyExchanges);
    }

    private class CurrencyConversion
    {
        public string FromCurrency { get; set; }
        public string ToCurrency { get; set; }
    }
}